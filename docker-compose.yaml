services:
  network-service:
    image: alpine:3.21.3
    container_name: chatbot-network
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}" # MinIO API
      - "9001:9001"                   # MinIO Console
      - "${LOGTO_PORT}:${LOGTO_PORT}" # Logto
      - "3002:3002"                   # Logto Admin
      - "${LOBE_PORT}:3210"           # LobeChat
    command: tail -f /dev/null
    networks:
      - chatbot-network

  postgresql:
    image: pgvector/pgvector:pg17
    container_name: chatbot-postgres
    ports:
      - "5432:5432"
    volumes:
      - "${POSTGRES_VOLUME}:/var/lib/postgresql/data"
    environment:
      - "POSTGRES_DB=${LOBE_DB_NAME}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - chatbot-network

  minio:
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
    container_name: chatbot-minio
    network_mode: "service:network-service"
    volumes:
      - "${MINIO_VOLUME}:/etc/minio/data"
    environment:
      - "MINIO_ROOT_USER=${MINIO_ROOT_USER}"
      - "MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}"
      - "MINIO_API_CORS_ALLOW_ORIGIN=http://${IP_ADDR}:${LOBE_PORT}"
    restart: always
    command: >
      server /etc/minio/data --address ":${MINIO_PORT}" --console-address ":9001"

  logto:
    image: svhd/logto:1.26
    container_name: chatbot-logto
    network_mode: "service:network-service"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - "TRUST_PROXY_HEADER=false"
      - "PORT=${LOGTO_PORT}"
      - "DB_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgresql:5432/logto"
      - "ENDPOINT=http://${IP_ADDR}:${LOGTO_PORT}"
      - "ADMIN_ENDPOINT=http://${IP_ADDR}:3002"
    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]

  lobe:
    image: lobehub/lobe-chat-database:1.77.4
    container_name: chatbot-lobe-database
    network_mode: "service:network-service"
    depends_on:
      postgresql:
        condition: service_healthy
      network-service:
        condition: service_started
      minio:
        condition: service_started
      logto:
        condition: service_started
      ollama:
        condition: service_started
    environment:
      - "APP_URL=http://${IP_ADDR}:${LOBE_PORT}"
      - "NEXT_AUTH_SSO_PROVIDERS=logto"
      - "KEY_VAULTS_SECRET=Kix2wcUONd4CX51E/ZPAd36BqM4wzJgKjPtz2sGztqQ="
      - "NEXT_AUTH_SECRET=NX2kaPE923dt6BL2U8e9oSre5RfoT7hg"
      - "NEXTAUTH_URL=http://${IP_ADDR}:${LOBE_PORT}/api/auth"
      - "LOGTO_ISSUER=http://${IP_ADDR}:${LOGTO_PORT}/oidc"
      - "DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgresql:5432/${LOBE_DB_NAME}"
      - "S3_ENDPOINT=http://${IP_ADDR}:${MINIO_PORT}"
      - "S3_BUCKET=${MINIO_LOBE_BUCKET}"
      - "S3_PUBLIC_DOMAIN=http://${IP_ADDR}:${MINIO_PORT}"
      - "S3_ENABLE_PATH_STYLE=1"
    env_file:
      - .env
    restart: always

  ollama:
    image: ollama/ollama:0.6.3
    container_name: chatbot-ollama
    healthcheck:
      test: ollama ps || exit 1
      interval: 10s
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      - "OLLAMA_KEEP_ALIVE=5m"
      - "OLLAMA_FLASH_ATTENTION=0"
      # - "OLLAMA_HOST=0.0.0.0"
      # - "OLLAMA_ORIGINS=*"
    volumes:
      - ${OLLAMA_VOLUME}:/root/.ollama
    # if your server doesn't have Nvidia GPU, comment out these lines below to run on CPU
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

# volumes:
#   ollama:
#     driver: local
#   s3_data:
#     driver: local
#   data:
#     driver: local

networks:
  chatbot-network:
    driver: bridge
